generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "driverAdapters"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DB_CONNECTION_STRING")
  extensions = [vector]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  files         File[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chat {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  name      String   @default("New Thread")
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  content   String
  userId    String
  role      String
  chatId    String
}

// File model which represents a file uploaded by a user
// and that exists in the local storage
model File {
  id       String     @id @default(cuid())
  filename String
  size     Int
  userId   String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  document Document[]
}

// Document model which represents a document that is vectorized
model Document {
  id      String                 @id @default(cuid())
  content String
  vector  Unsupported("vector")?
  fileId  String
  file    File                   @relation(fields: [fileId], references: [id], onDelete: Cascade)
}
